package poiuyt.alarm.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import poiuyt.alarm.model.Alarm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM".
*/
public class AlarmDao extends AbstractDao<Alarm, Long> {

    public static final String TABLENAME = "ALARM";

    /**
     * Properties of entity Alarm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property Active = new Property(2, Boolean.class, "active", false, "ACTIVE");
        public final static Property DurationTime = new Property(3, Long.class, "durationTime", false, "DURATION_TIME");
        public final static Property RepeatDay = new Property(4, String.class, "repeatDay", false, "REPEAT_DAY");
        public final static Property TonePath = new Property(5, String.class, "tonePath", false, "TONE_PATH");
        public final static Property Vibrate = new Property(6, Boolean.class, "vibrate", false, "VIBRATE");
        public final static Property Label = new Property(7, String.class, "label", false, "LABEL");
    };


    public AlarmDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TIME\" INTEGER," + // 1: time
                "\"ACTIVE\" INTEGER," + // 2: active
                "\"DURATION_TIME\" INTEGER," + // 3: durationTime
                "\"REPEAT_DAY\" TEXT," + // 4: repeatDay
                "\"TONE_PATH\" TEXT," + // 5: tonePath
                "\"VIBRATE\" INTEGER," + // 6: vibrate
                "\"LABEL\" TEXT);"); // 7: label
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Alarm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(3, active ? 1L: 0L);
        }
 
        Long durationTime = entity.getDurationTime();
        if (durationTime != null) {
            stmt.bindLong(4, durationTime);
        }
 
        String repeatDay = entity.getRepeatDay();
        if (repeatDay != null) {
            stmt.bindString(5, repeatDay);
        }
 
        String tonePath = entity.getTonePath();
        if (tonePath != null) {
            stmt.bindString(6, tonePath);
        }
 
        Boolean vibrate = entity.getVibrate();
        if (vibrate != null) {
            stmt.bindLong(7, vibrate ? 1L: 0L);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(8, label);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Alarm readEntity(Cursor cursor, int offset) {
        Alarm entity = new Alarm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // active
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // durationTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // repeatDay
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tonePath
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // vibrate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // label
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Alarm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setActive(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setDurationTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setRepeatDay(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTonePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVibrate(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setLabel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Alarm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Alarm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
